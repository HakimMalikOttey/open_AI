#from pyimagesearch.tempimage import TempImage
from picamera.array import PiRGBArray
from picamera import PiCamera
from imutils.video import VideoStream
import argparse
import datetime
import warnings
import imutils
import time
import cv2
import json

# construct the argument parser and parse the arguments
ap = argparse.ArgumentParser()
ap.add_argument("-v", "--video", help="path to the video file")
ap.add_argument("-a", "--min-area", type=int, default=600, help="minimum area size")
#ap.add_argument()
ap.add_argument("-c", "--conf", required = True, help = "path to the JSON configuration file")
args = vars(ap.parse_args())
#Filter warninings and load config
warnings.filterwarnings("ignore")
conf = json.load(open(args["conf"]))
# Warms up camera and grabs reference to raw camera capture
vs = PiCamera()
vs.resolution = tuple(conf["resolution"])
vs.framerate = conf["fps"]
raw = PiRGBArray(vs,size = tuple(conf["resolution"]))
time.sleep(conf["camera_warmup_time"])
# initialize the first frame in the video stream
firstFrame = None
# loop over the frames of the video
for f in vs.capture_continuous(raw, format = "bgr", use_video_port = True):
    # grab the current frame and initialize the occupied/unoccupied
    # text
    frame = f.array()
    text = "No Movement"
    # resize the frame, convert it to grayscale, and blur it
    frame = imutils.resize(frame, width=600)
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    gray = cv2.GaussianBlur(gray, (21, 21), 0)
    # if the first frame is None, initialize it
    if firstFrame is None:
        firstFrame = gray.copy().astype("float")
        raw.truncate(0)
        continue
    cv2.accumulateWeighted(gray,firstFrame,0.5)
    frameDelta = cv2.absdiff(gray, cv2.convertScaleAbs(firstFrame))
    thresh = cv2.threshold(frameDelta,conf["delta_thresh"],255, cv2.THRESH_BINARY)[1]
    thresh = cv2.dilate(thresh, None, iterations=2)
    cnts = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)
    cnts = imutils.grab_contours(cnts)

    # loop over the contours
    for c in cnts:
        # if the contour is too small, ignore it
        if cv2.contourArea(c) < conf["min_area"]:
            text = "No movement"
            continue
        # compute the bounding box for the contour, draw it on the frame,
        # and update the text
        (x, y, w, h) = cv2.boundingRect(c)
        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 100, 0), 2)
        text = "Movement"
    # draw the text and timestamp on the frame
    cv2.putText(frame, "Room Status: {}".format(text), (10, 20),cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 2)
    cv2.putText(frame, datetime.datetime.now().strftime("%A %d %B %Y %I:%M:%S%p"),(10, frame.shape[0] - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.35, (0, 0, 255), 1)
    # show the frame and record if the user presses a key
    cv2.imshow("Object Detection", frame)
    #Do not remove. Neccessary for camera showing feed in window
    key = cv2.waitKey(1) & 0xFF
